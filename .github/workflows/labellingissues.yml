name: Welcome New Contributors

on:
  issues:
    types:
      - opened
  pull_request:
    types:
      - opened

jobs:
  welcome:
    runs-on: ubuntu-latest

    steps:
      - name: Check First Contribution
        id: check-contribution
        run: |
          USER_CONTRIBUTIONS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                             "https://api.github.com/repos/${{ github.repository }}/contributors/${{ github.event.issue.user.login }}/events")
          # Check if there are no previous contributions (issues or pull requests) by the user in your repository
          if [[ $(echo "$USER_CONTRIBUTIONS" | jq 'map(select(.type | test("^(IssuesEvent|PullRequestEvent)$") | not)) | length') -eq 0 ]]; then
            echo "::set-output name=first-contribution::true"
          else
            echo "::set-output name=first-contribution::false"
          fi
        env:
          FIRST_CONTRIBUTION: ${{ steps.check-contribution.outputs.first-contribution }}

      - name: Fetch Random Meme
        id: fetch-meme
        run: |
          # Fetch a random meme using the external API
          MEME_API_KEY=${{ secrets.MEME_API_KEY }}
          MEME_API_URL="https://api.example.com/memes"  # Replace with the actual meme API URL

          # Use your favorite HTTP client to fetch memes
          # Example with curl:
          meme_url=$(curl -s -H "X-Api-Key: $MEME_API_KEY" $MEME_API_URL | jq -r '.url')

          echo "MEME_URL=$meme_url" >> $GITHUB_ENV

      - name: Post Welcome Comment
        if: steps.check-contribution.outputs.first-contribution == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.KEVI_TOKEN }}
          script: |
            const body = `Thank you for making your first contribution to our project! :tada:\n\nWelcome to our community. We're excited to have you on board! :rocket:\n\nHere's a random meme to brighten your day: ![Meme](${env.MEME_URL})\n\n${context.payload.issue.html_url}`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

